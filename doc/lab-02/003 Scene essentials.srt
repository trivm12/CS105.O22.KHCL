1
00:00:00.06 --> 00:00:02.01
- [Instructor] When working with Three.js,

2
00:00:02.01 --> 00:00:03.09
and with 3D in general, there are a couple

3
00:00:03.09 --> 00:00:06.01
of required objects we need to have.

4
00:00:06.01 --> 00:00:09.06
One of the first things that
we need is a scene object.

5
00:00:09.06 --> 00:00:11.06
You can think of a scene
object as a container

6
00:00:11.06 --> 00:00:15.00
for any other 3D object that
you are planning to work with.

7
00:00:15.00 --> 00:00:18.00
It represents the 3D world
that we will be building.

8
00:00:18.00 --> 00:00:21.00
We can create the scene
object by doing this.

9
00:00:21.00 --> 00:00:23.05
First, I'm going to remove
the console.log line

10
00:00:23.05 --> 00:00:26.08
that is here, and load create a variable

11
00:00:26.08 --> 00:00:32.02
called scene, and then
initiate Three.js Scene object.

12
00:00:32.02 --> 00:00:34.05
Another thing that we need to have

13
00:00:34.05 --> 00:00:37.01
when working with 3D is the camera.

14
00:00:37.01 --> 00:00:40.05
Think of camera like the
eyes that we will be viewing

15
00:00:40.05 --> 00:00:42.03
this 3D world through.

16
00:00:42.03 --> 00:00:44.05
When working with a 2D visualization,

17
00:00:44.05 --> 00:00:47.05
the concept of a camera
usually doesn't exist.

18
00:00:47.05 --> 00:00:50.07
What you see is what you get, but in 3D,

19
00:00:50.07 --> 00:00:53.03
you need a camera to
define your point of view,

20
00:00:53.03 --> 00:00:55.02
as there are many positions and angles

21
00:00:55.02 --> 00:00:57.07
that you could be looking
at the scene from.

22
00:00:57.07 --> 00:01:00.02
A Three.js camera requires several options

23
00:01:00.02 --> 00:01:02.07
to be provided during the initialization,

24
00:01:02.07 --> 00:01:05.06
such as field of view, aspect ratio,

25
00:01:05.06 --> 00:01:08.08
and near and far clipping planes.

26
00:01:08.08 --> 00:01:12.03
So here, let's initialize the camera,

27
00:01:12.03 --> 00:01:19.06
which is going to be a
Three.js PerspectiveCamera,

28
00:01:19.06 --> 00:01:22.03
and first, we will define a field of view

29
00:01:22.03 --> 00:01:27.07
that defines how much of the
scene that we are seeing,

30
00:01:27.07 --> 00:01:30.01
and then we will define the aspect ratio,

31
00:01:30.01 --> 00:01:32.04
which is going to be the window.innerWidth

32
00:01:32.04 --> 00:01:38.00
divided by window.innerHeight,

33
00:01:38.00 --> 00:01:42.09
and then we will define the
near and far clipping planes.

34
00:01:42.09 --> 00:01:46.04
Of these parameters, the
near and far clipping planes

35
00:01:46.04 --> 00:01:48.03
might look at bit different.

36
00:01:48.03 --> 00:01:51.04
They're mainly there for
optimization purposes.

37
00:01:51.04 --> 00:01:54.00
Anything beyond these
distances won't be visible

38
00:01:54.00 --> 00:01:56.08
in our scene, and won't be
included in the calculations

39
00:01:56.08 --> 00:01:59.01
that you'll be generating with the image.

40
00:01:59.01 --> 00:02:02.02
The camera captures the
scene for display purposes,

41
00:02:02.02 --> 00:02:04.04
but for us to actually see anything,

42
00:02:04.04 --> 00:02:08.06
the 3D data needs to be
converted into a 2D image.

43
00:02:08.06 --> 00:02:10.03
This process is called rendering,

44
00:02:10.03 --> 00:02:13.01
and Three.js comes with
couple of renderers.

45
00:02:13.01 --> 00:02:15.01
We will be using the WebGLRenderer.

46
00:02:15.01 --> 00:02:24.05
You can initialize the
WebGLRenderer like this.

47
00:02:24.05 --> 00:02:28.02
Three.js have other
renderers such as Canvas

48
00:02:28.02 --> 00:02:29.09
or the SVGRenderer.

49
00:02:29.09 --> 00:02:32.02
These renderers can be
useful when you are working

50
00:02:32.02 --> 00:02:34.07
in an environment that
doesn't support WebGL,

51
00:02:34.07 --> 00:02:37.09
but the problem is that,
since they are using CPU

52
00:02:37.09 --> 00:02:40.04
instead of the GPU for their calculations,

53
00:02:40.04 --> 00:02:43.06
the processing of the
image is a lot slower.

54
00:02:43.06 --> 00:02:45.04
Also some of the features of WebGL

55
00:02:45.04 --> 00:02:48.01
such as shadows or
shaders are not available

56
00:02:48.01 --> 00:02:49.04
to these renderers.

57
00:02:49.04 --> 00:02:51.05
This means that the end user experience

58
00:02:51.05 --> 00:02:53.04
using these won't be so great,

59
00:02:53.04 --> 00:02:55.01
so you shouldn't really rely on them

60
00:02:55.01 --> 00:02:58.01
to deliver engaging visual experiences.

61
00:02:58.01 --> 00:03:00.00
We will need to set the
size of the renderer,

62
00:03:00.00 --> 00:03:02.06
which will dictate the
size of the visual output.

63
00:03:02.06 --> 00:03:06.00
It's a good idea to have
the size of the renderer

64
00:03:06.00 --> 00:03:11.00
proportional to the window.innerHeight
and window.innerWidth

65
00:03:11.00 --> 00:03:13.04
so I will first put in the innerWidth,

66
00:03:13.04 --> 00:03:17.05
and then I will provide
the window.innerHeight.

67
00:03:17.05 --> 00:03:19.08
To be able to display the
results of the renderer,

68
00:03:19.08 --> 00:03:22.05
we need to append the
domElement for the renderer

69
00:03:22.05 --> 00:03:24.08
to our HTML content.

70
00:03:24.08 --> 00:03:26.07
We will use the empty div element

71
00:03:26.07 --> 00:03:29.03
that has the ID webgl for this purpose.

72
00:03:29.03 --> 00:03:34.07
So here, we will be using the document,

73
00:03:34.07 --> 00:03:38.06
getElementById method to be able

74
00:03:38.06 --> 00:03:44.00
to select the webgl div element,

75
00:03:44.00 --> 00:03:49.01
and then I will add the
rendering domElement

76
00:03:49.01 --> 00:03:53.02
to this empty div that has the ID webgl,

77
00:03:53.02 --> 00:03:54.00
and having done all this,

78
00:03:54.00 --> 00:03:58.04
now, if you are to call the
render method on the renderer

79
00:03:58.04 --> 00:04:01.02
by providing the scene, and
the camera is the argument,

80
00:04:01.02 --> 00:04:03.01
we should start seeing things.

81
00:04:03.01 --> 00:04:05.00
So if I'm to call the renderer method

82
00:04:05.00 --> 00:04:09.02
on the render, using the scene,

83
00:04:09.02 --> 00:04:12.01
and the camera, things should work,

84
00:04:12.01 --> 00:04:14.07
but first of all, I'm
going to put everything

85
00:04:14.07 --> 00:04:16.08
inside a function called init

86
00:04:16.08 --> 00:04:22.05
to have things a little
bit more tidied up,

87
00:04:22.05 --> 00:04:26.01
and I will call this function instead.

88
00:04:26.01 --> 00:04:28.03
Now, if you are to check out Chrome,

89
00:04:28.03 --> 00:04:30.00
you should start seeing things.

90
00:04:30.00 --> 00:04:33.03
So looking at Chrome, it seems
like we are getting an error,

91
00:04:33.03 --> 00:04:35.05
and the error is on line 12,

92
00:04:35.05 --> 00:04:37.06
saying that render is not defined.

93
00:04:37.06 --> 00:04:40.02
Let's go back to our file
to see what's going wrong.

94
00:04:40.02 --> 00:04:44.00
If I'm to look at this line,
this is render.setSize,

95
00:04:44.00 --> 00:04:46.09
but setSize is a method on the render,

96
00:04:46.09 --> 00:04:48.01
so I have a typo here.

97
00:04:48.01 --> 00:04:50.06
I'm going to just change it to renderer,

98
00:04:50.06 --> 00:04:52.03
and save the file again.

99
00:04:52.03 --> 00:04:54.07
Now if you are to go back to Chrome,

100
00:04:54.07 --> 00:04:56.07
you should see everything is working,

101
00:04:56.07 --> 00:05:00.07
and it seems like we
are now seeing nothing.

102
00:05:00.07 --> 00:05:03.09
The problem is that even
though our setup is working,

103
00:05:03.09 --> 00:05:06.07
since we didn't include
any objects in our scene,

104
00:05:06.07 --> 00:05:08.06
we are just getting a black screen,

105
00:05:08.06 --> 00:05:10.08
which is equivalent to empty space.

106
00:05:10.08 --> 00:05:13.01
We need to populate the scene with objects

107
00:05:13.01 --> 00:05:14.08
to be able to see something.

108
00:05:14.08 --> 00:05:16.04
Let's do that next.

